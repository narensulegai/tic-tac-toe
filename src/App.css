* {
    box-sizing: border-box;
}

body {
    margin: 0;
    padding: 0;
}

.center {
    text-align: center;
    margin: auto;
}

.container {
    width: 20rem;
    height: 20rem;
    display: flex;
    flex-direction: column;
}

.small-margin-top {
    margin-top: 2rem;
}

.grid-row {
    /*
    css grid/table is probably the way to go, but I feel that more
    developers are familiar with flex, it will be easier to maintain.
    Table is a good choice for accessibility.
    */
    flex: 1;
    display: flex;
}

.grid-cell {
    box-sizing: content-box; /*small hack to make sure that the borders are padded*/
    border: 1px solid black;
    margin: 0.2rem;
    flex: 1;
    background: transparent;
    padding: 0;

}

/*has lacks browser support, but still ok if it breaks for this use case, as it only centers the dot*/
.grid-cell:has(.dot) {
    display: flex;
    justify-content: center;
    align-items: center;
}

.grid-cell:hover[data-cell-empty='true'] {
    background: rgba(12, 189, 6, 0.5);
    cursor: pointer;
}

.dot {
    height: 90%;
    width: 90%;
    border-top: 1rem solid gold;
    border-right: 1rem solid red;
    border-left: 1rem solid green;
    border-bottom: 1rem solid blue;
    border-radius: 50%;
}

.cross .left, .cross .right {
    height: 80%;
    width: 1rem;
    background: blue;
    position: absolute;
    top: 50%;
    margin-top: -40%;
    left: 50%;
    margin-left: -0.5rem;
}

.cross {
    position: relative;
    height: 100%;
}

.cross .left {
    transform: rotate(45deg);
}

.cross .right {
    transform: rotate(-45deg);
    background: green;
}

/*TODO: add support for medium devices*/
@media screen and (max-width: 320px) {
    .container {
        width: 10rem;
        height: 10rem;
    }
}
